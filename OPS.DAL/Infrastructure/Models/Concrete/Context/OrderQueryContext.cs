// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Genie (http://www.github.com/rusith/genie).
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Threading.Tasks;
using System.Collections.Generic;
using OPS.DAL.Infrastructure.Models.Abstract;
using OPS.DAL.Infrastructure.Filters.Abstract;
using OPS.DAL.Infrastructure.Filters.Concrete;
using OPS.DAL.Infrastructure.Repositories.Abstract;
using OPS.DAL.Infrastructure.Models.Abstract.Context;

namespace OPS.DAL.Infrastructure.Models.Concrete.Context
{
    internal class OrderQueryContext: BaseQueryContext, IOrderQueryContext
	{
		private IOrderFilterContext _where; 
	    private IOrderOrderContext _order;
		private readonly IOrderRepository _repo;
		private readonly string[] _columnNames = { "Remarks", "ID", "Quantity" };

        public IOrderQueryContext Page(int pageSize, int page)
        {
            _page = page;
            _pageSize = pageSize;
            return this;
        }

        public IOrderQueryContext Top(int limit)
        {
            _limit = limit;
            return this;
        }

        public IOrderQueryContext Skip(int skip)
        {
            _skip = skip;
            return this;
        }

        public IOrderQueryContext Take(int take)
        {
            _take = take;
            return this;
        }
		
		internal OrderQueryContext(IOrderRepository repo) { _repo = repo; }
		
		public IOrderFilterContext Where { get { return _where ?? (_where = new OrderFilterContext(this)); }}
        
		public IOrderOrderContext OrderBy { get { return _order ?? (_order = new OrderOrderContext(this)); } }

        public IEnumerable<Order> Query(IDbTransaction transaction = null)
	    {
	        return _repo.Get(GetQuery(transaction));
	    }

        public async Task<IEnumerable<Order>> QueryAsync(IDbTransaction transaction = null)
	    {
	        return await _repo.GetAsync(GetQuery(transaction));
	    }

		public Order FirstOrDefault(IDbTransaction transaction = null)
	    {
			Top(1);
	        return _repo.GetFirstOrDefault(GetQuery(transaction));
	    }


        public async Task<Order> FirstOrDefaultAsync(IDbTransaction transaction = null)
	    {
			Top(1);
	        return await _repo.GetFirstOrDefaultAsync(GetQuery(transaction));
	    }

	    public int Count(IDbTransaction transaction = null)
	    {
            return _repo.Count(GetQuery(transaction));
	    }

        public async Task<int> CountAsync(IDbTransaction transaction = null)
	    {
            return await _repo.CountAsync(GetQuery(transaction));
	    }

		public IOrderQueryContext Filter(IEnumerable<IPropertyFilter> filters) 
		{
            ProcessFilter(Where.GetFilterExpressions(), filters);
			return this;	
		}

		public IOrderQueryContext SortBy(Tuple<string, bool> sortInfo)
	    {
			if(sortInfo == null)
				return this;

            Sort(OrderBy.GetOrderExpressions(), sortInfo.Item1, sortInfo.Item2);
	        return this;
	    }

	    private IRepoQuery GetQuery(IDbTransaction transaction)
	    {
	        return new RepoQuery
	        {
	            Target = "`ops`.`Order`",
	            Where = _where?.GetFilterExpressions(),
	            Order = _order?.GetOrderExpressions(),
	            PageSize = _pageSize,
	            Page = _page,
	            Limit = _limit,
	            Skip = _skip,
	            Take = _take,
	            Transaction = transaction,
                Columns = _columnNames
	        };
	    }

		protected override bool? IsQuoted(ref string propertyName) 
		{
			switch(propertyName.ToLower()) 
			{
				case "remarks":
					propertyName = "Remarks";
					return true;
				case "id":
					propertyName = "ID";
					return false;
				case "quantity":
					propertyName = "Quantity";
					return false;

				default: return null;
			}
		}

		public string GetWhereClause() 
		{
			return _repo.GetWhereClause(GetQuery(null));
		}
	}
}
