// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Genie (http://www.github.com/rusith/genie).
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using OPS.DAL.Infrastructure.Interfaces;
using MySql.Data.MySqlClient;
using OPS.DAL.Dapper;
namespace OPS.DAL.Infrastructure
{
	public class ProcedureContainer: IProcedureContainer
    {
		private IDBContext Context { get; }

		internal ProcedureContainer(IDBContext context)
		{
		    Context = context;
		}

		private MySqlConnection GetConnection()
		{
			return new MySqlConnection(Context.Connection.ConnectionString);
		}

		private void Execute(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				connection.Execute(name, parameters, commandType: CommandType.StoredProcedure);
			}
		}

		private T QuerySingle<T>(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				return connection.QueryFirstOrDefault<T>(name, parameters, commandType: CommandType.StoredProcedure);
			}
		}

		private IEnumerable<T> QueryList<T>(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				return connection.Query<T>(name, parameters, commandType: CommandType.StoredProcedure);
			}
		}

		private async Task ExecuteAsync(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				await connection.ExecuteAsync(name, parameters, commandType: CommandType.StoredProcedure);
				connection.Close();
			}
		}

		private async Task<T> QuerySingleAsync<T>(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				return await connection.QueryFirstOrDefaultAsync<T>(name, parameters, commandType: CommandType.StoredProcedure);
			}
		}

		private async Task<IEnumerable<T>> QueryListAsync<T>(string  name, object parameters) 
		{
			using(var connection = GetConnection())
			{
				connection.Open();
				return await connection.QueryAsync<T>(name, parameters, commandType: CommandType.StoredProcedure);
			}
		}







    }
}

